// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use abstract_orm::Joinable;
pub trait TableName {
                type Item;
                fn get_table_ref() -> Self::Item;
            }
use chrono::NaiveDateTime;
use diesel::prelude::*;
use diesel_autoincrement_new_struct::{apply, NewInsertable};
use serde::{Deserialize, Serialize};
#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(AccomodationPropertyStatu, foreign_key = status_id))]
#[diesel(belongs_to(Addres, foreign_key = address_id))]
#[diesel(belongs_to(Currency, foreign_key = currency_id))]
#[diesel(belongs_to(Language, foreign_key = preferred_language_id))]
#[diesel(belongs_to(Role, foreign_key = role_id))]
#[many_to_many(facilities = AccomodationPropertyFacility by AccomodationPropertyToFacility, types = AccomodationPropertyType by AccomodationPropertyToType)]
#[diesel(table_name = crate::schema::accomodation_property)]
#[one_to_many(accomodation_property_photos = AccomodationPropertyPhoto, rooms = Room)]
#[with_guard(role.authority)]
pub struct AccomodationProperty {
    pub id: i64,
    pub version: i64,
    pub stars: i32,
    #[many_to_one(Option<Currency>)]
    pub currency_id: Option<i64>,
    pub number_of_rooms: i32,
    pub hotel_logo: Option<String>,
    #[many_to_one(Option<Addres>)]
    pub address_id: Option<i64>,
    pub checked_out: Option<bool>,
    #[many_to_one(Option<Role>)]
    pub role_id: Option<i64>,
    pub name: String,
    #[many_to_one(Option<AccomodationPropertyStatu>)]
    pub status_id: Option<i64>,
    #[many_to_one(Option<Language>)]
    pub preferred_language_id: Option<i64>,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[one_to_many(join_property = AccomodationPropertyToFacility)]
#[diesel(table_name = crate::schema::accomodation_property_facility)]
pub struct AccomodationPropertyFacility {
    pub id: i64,
    pub version: i64,
    pub name: String,
    pub hac: Option<String>,
    pub booking_extended_code: Option<String>,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(AccomodationProperty, foreign_key = accomodation_property_id))]
#[diesel(table_name = crate::schema::accomodation_property_photo)]
pub struct AccomodationPropertyPhoto {
    pub id: i64,
    pub version: i64,
    #[many_to_one(AccomodationProperty)]
    pub accomodation_property_id: i64,
    pub file_name: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::accomodation_property_status)]
#[one_to_many(accomodation_properties = AccomodationProperty)]
pub struct AccomodationPropertyStatu {
    pub id: i64,
    pub version: i64,
    pub status: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(primary_key(accomodation_property_facility_id, accomodation_property_id))]
#[diesel(belongs_to(AccomodationProperty))]
#[diesel(belongs_to(AccomodationPropertyFacility))]
#[diesel(table_name = crate::schema::accomodation_property_to_facility)]
pub struct AccomodationPropertyToFacility {
    pub accomodation_property_id: i64,
    pub accomodation_property_facility_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(primary_key(accomodation_property_id, language_id))]
#[diesel(belongs_to(AccomodationProperty))]
#[diesel(belongs_to(Language))]
#[diesel(table_name = crate::schema::accomodation_property_to_language)]
pub struct AccomodationPropertyToLanguage {
    pub accomodation_property_id: i64,
    pub language_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(primary_key(accomodation_property_id, accomodation_property_type_id))]
#[diesel(belongs_to(AccomodationProperty))]
#[diesel(belongs_to(AccomodationPropertyType))]
#[diesel(table_name = crate::schema::accomodation_property_to_type)]
pub struct AccomodationPropertyToType {
    pub accomodation_property_id: i64,
    pub accomodation_property_type_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::accomodation_property_type)]
pub struct AccomodationPropertyType {
    pub id: i64,
    pub version: i64,
    pub type_: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(City, foreign_key = _city_id))]
#[diesel(table_name = crate::schema::address)]
#[one_to_many(accomodation_properties = AccomodationProperty)]
pub struct Addres {
    pub id: i64,
    pub version: i64,
    pub region: Option<String>,
    pub telephone: Option<String>,
    pub fax: Option<String>,
    pub additional_emails: Option<String>,
    pub location: Option<String>,
    pub city: String,
    pub on_map: Option<String>,
    pub street: String,
    pub zip_code: Option<String>,
    pub email: Option<String>,
    pub website: Option<String>,
    #[many_to_one(City)]
    pub _city_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(County, foreign_key = county_id))]
#[diesel(table_name = crate::schema::city)]
#[one_to_many(addresses = Addres)]
pub struct City {
    pub id: i64,
    pub cc_fips: Option<String>,
    pub country_iso_id: Option<String>,
    pub full_name: Option<String>,
    pub version: i64,
    pub show_city: bool,
    #[many_to_one(County)]
    pub county_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::country)]
#[one_to_many(counties = County)]
pub struct Country {
    pub id: i64,
    pub id_fips: Option<String>,
    pub id_iso: Option<String>,
    pub tld: Option<String>,
    pub country_name: Option<String>,
    pub version: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(Country, foreign_key = country_id))]
#[diesel(table_name = crate::schema::county)]
#[one_to_many(cities = City)]
pub struct County {
    pub id: i64,
    pub version: i64,
    pub name: String,
    #[many_to_one(Country)]
    pub country_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::currency)]
#[one_to_many(accomodation_properties = AccomodationProperty)]
pub struct Currency {
    pub id: i64,
    pub version: i64,
    pub value: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::language)]
#[one_to_many(accomodation_properties = AccomodationProperty)]
pub struct Language {
    pub id: i64,
    pub version: i64,
    pub code: String,
    pub name: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::meal_plan)]
#[one_to_many(reservations = Reservation, room_meal_plans = RoomMealPlan)]
pub struct MealPlan {
    pub id: i64,
    pub name: String,
    pub description: Option<String>,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::photo_tag)]
pub struct PhotoTag {
    pub id: i64,
    pub version: i64,
    pub name: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(MealPlan, foreign_key = meal_plan_id))]
#[diesel(belongs_to(Room, foreign_key = room_id))]
#[diesel(belongs_to(RoomTypeAvailabilityRate, foreign_key = room_type_availability_id))]
#[diesel(table_name = crate::schema::reservation)]
pub struct Reservation {
    pub id: i64,
    pub version: i64,
    #[many_to_one(Option<Room>)]
    pub room_id: Option<i64>,
    pub occupancy: i32,
    pub date: NaiveDateTime,
    #[many_to_one(RoomTypeAvailabilityRate)]
    pub room_type_availability_id: i64,
    pub price: f32,
    #[many_to_one(Option<MealPlan>)]
    pub meal_plan_id: Option<i64>,
    pub status: i32,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::role)]
#[one_to_many(accomodation_properties = AccomodationProperty)]
pub struct Role {
    pub id: i64,
    pub version: i64,
    pub authority: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(AccomodationProperty, foreign_key = accomodation_property_id))]
#[diesel(belongs_to(RoomPricingType, foreign_key = pricing_type_id))]
#[many_to_many(facilities = RoomFacility by RoomToFacility)]
#[diesel(table_name = crate::schema::room)]
#[one_to_many(reservations = Reservation, room_meal_plans = RoomMealPlan, room_photos = RoomPhoto, room_type_availability_rates = RoomTypeAvailabilityRate)]
#[with_guard(accomodation_property.role.authority)]
pub struct Room {
    pub id: i64,
    pub version: i64,
    pub default_occupancy: i32,
    pub minimum_guests: i32,
    pub name: String,
    #[many_to_one(RoomPricingType)]
    pub pricing_type_id: i64,
    #[many_to_one(AccomodationProperty)]
    pub accomodation_property_id: i64,
    pub baby_coats: i32,
    pub maximum_guests: i32,
    pub room_view: Option<String>,
    pub floor: Option<i32>,
    pub description: Option<String>,
    pub size_measurement: f32,
    pub size_measurement_unit: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::room_facilities)]
pub struct RoomFacility {
    pub id: i64,
    pub version: i64,
    pub name: String,
    pub rma: Option<String>,
    pub booking_extended_amenities: Option<String>,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(primary_key(room_meal_plan_id, meal_plan_id))]
#[diesel(belongs_to(MealPlan, foreign_key = meal_plan_id))]
#[diesel(belongs_to(Room, foreign_key = room_meal_plan_id))]
#[diesel(table_name = crate::schema::room_meal_plan)]
pub struct RoomMealPlan {
    #[many_to_one(Room)]
    pub room_meal_plan_id: i64,
    #[many_to_one(MealPlan)]
    pub meal_plan_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(Room, foreign_key = room_id))]
#[diesel(table_name = crate::schema::room_photo)]
pub struct RoomPhoto {
    pub id: i64,
    pub version: i64,
    #[many_to_one(Room)]
    pub room_id: i64,
    pub file_size: Option<String>,
    pub rank_sort: i32,
    pub file_name: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::room_pricing_type)]
#[one_to_many(rooms = Room)]
pub struct RoomPricingType {
    pub id: i64,
    pub version: i64,
    pub name: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(primary_key(room_id, room_facility_id))]
#[diesel(belongs_to(Room))]
#[diesel(belongs_to(RoomFacility))]
#[diesel(table_name = crate::schema::room_to_facilities)]
pub struct RoomToFacility {
    pub room_id: i64,
    pub room_facility_id: i64,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(belongs_to(Room, foreign_key = room_id))]
#[diesel(table_name = crate::schema::room_type_availability_rates)]
#[one_to_many(reservations = Reservation)]
pub struct RoomTypeAvailabilityRate {
    pub id: i64,
    pub available_units: Option<i32>,
    pub rate_amount_parameter: Option<f32>,
    #[many_to_one(Room)]
    pub room_id: i64,
    pub date: NaiveDateTime,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone,  PartialEq)]
#[diesel(table_name = crate::schema::users)]
#[many_to_many(roles = Role by UserToRole)]
pub struct User {
    pub id: i64,
    pub name: String,
    pub password: String,
}

#[derive(Joinable)]
#[derive(Identifiable, Queryable, Debug, Selectable, Serialize, Deserialize, Clone, Associations, PartialEq)]
#[diesel(primary_key(user_id, role_id))]
#[diesel(belongs_to(User))]
#[diesel(belongs_to(Role))]
#[diesel(table_name = crate::schema::user_to_role)]
pub struct UserToRole {
    pub user_id: i64,
    pub role_id: i64,
}

